// Using UART2 for reading the data from the smart meter, if you use the UART0 you can not upload new code to the board cause its blocked while reading from the meter!
int uart2_rx_gpio = 16;
int uart2_tx_gpio = 17;

// int data_request_gpio = 26;
int DEBUG_LED_WIFI_GPIO = 21;
int DATA_REQUEST_SM1_GPIO = 100;
int DATA_REQUEST_SM2_GPIO = 100;
int DEBUG_LED_SM1_GPIO = 200;
int DEBUG_LED_SM2_GPIO = 200;

char ARDUINO_OTA_HOSTNAME[] = "ESP_Smartmeter";


int READOUT_INTERVALL = 5000;
int KEY_LENGTH = 16;
int AUTH_KEY_LENGTH = 16;


// IP - Network settings of your ESP
// IPAddress local_IP(10, 0, 0, 123); // Set your Static IP address 
// IPAddress gateway(10, 0, 0, 1);   // Set your Gateway IP address
// IPAddress subnet(255, 255, 255, 0); // Set your Subnet IP address
// IPAddress primaryDNS(10, 0, 0, 1);  
// IPAddress secondaryDNS(8, 8, 4, 4); 

//char mqtt_server[] = "test.mosquitto.org"; //Test mqttbroker
//const char* mqtt_server = "test.mosquitto.org";


// NTP Settings
char ntp_server[] = "pool.ntp.org";
const long gmtOffset_sec = 3600;
const int daylightOffset_sec = 3600;

const byte start_byte = 0x7E; 
const byte stop_byte = 0x7E;

const int max_wait_time_for_reading_data = 1100;
int delay_before_reading_data = 1000;

const int message_length = 123;
// byte buffer[900];
byte buffer[] = {0xDB, 0x08, 0x53, 0x41, 0x47, 0x32, 0x00, 0x03, 0x99, 0x27, 0x82, 0x01, 0x1C, 0x30, 0x00, 0x00, 0x08, 0xC2, 0x35, 0xB7, 0x46, 0x83, 0x90, 0xE4, 0xB5, 0xC3, 0xA7, 0x03, 0x25, 0x25, 0x03, 0x07, 0xC4, 0xEE, 0xCE, 0x0C, 0xCB, 0x5F, 0x26, 0x45, 0xC2, 0x9D, 0x08, 0xAF, 0x92, 0x37, 0x2C, 0x1E, 0x0E, 0x8E, 0x60, 0x5B, 0xEF, 0x0A, 0xF9, 0x90, 0xAD, 0x5A, 0xA0, 0xC5, 0xA0, 0x15, 0xBA, 0xFB, 0xBB, 0x07, 0xA3, 0x29, 0x67, 0xB6, 0x05, 0xA0, 0x1B, 0x0C, 0x2F, 0xE2, 0xDD, 0xE1, 0xCE, 0xE1, 0xBB, 0x46, 0x90, 0x71, 0xED, 0x86, 0xAC, 0x34, 0x7F, 0xA4, 0x3B, 0x2C, 0x7F, 0xE9, 0x34, 0x9C, 0x9D, 0x24, 0x39, 0x2F, 0x21, 0xDA, 0xF6, 0x2D, 0xCC, 0xDB, 0x21, 0x23, 0x5D, 0xDD, 0xB7, 0x94, 0xAE, 0xEB, 0x6E, 0xA8, 0xFA, 0x44, 0xB4, 0xCF, 0xE1, 0x5F, 0x01, 0xA1, 0xEC, 0x4D, 0xDE, 0x91, 0xAD, 0x16, 0x09, 0xCC, 0x58, 0x86, 0x39, 0x53, 0x8B, 0xA9, 0xA1, 0x7B, 0x40, 0xB7, 0xEA, 0xAF, 0xEA, 0x52, 0x5B, 0x84, 0x1F, 0x6D, 0x24, 0xD4, 0x01, 0x10, 0x50, 0x59, 0xB7, 0x2C, 0x92, 0x25, 0x83, 0x04, 0xFC, 0x8A, 0x09, 0x88, 0xFC, 0x9E, 0x07, 0x02, 0x1A, 0xB4, 0xAB, 0xF7, 0xB0, 0xDA, 0xB8, 0xE5, 0x01, 0x94, 0x23, 0x10, 0xCC, 0x9D, 0x2A, 0x7A, 0x3B, 0x87, 0xDF, 0x98, 0xDF, 0x63, 0xD9, 0x7B, 0x17, 0xE7, 0xE5, 0xFC, 0x40, 0x72, 0x03, 0x13, 0x97, 0xD9, 0x75, 0x30, 0xB4, 0x6E, 0xF9, 0x19, 0xB2, 0xA1, 0x62, 0x1A, 0x34, 0xFB, 0x72, 0xC3, 0xE0, 0xC1, 0xF6, 0x71, 0xC6, 0x70, 0x54, 0xAA, 0x40, 0x0B, 0x9F, 0x48, 0xEA, 0xC4, 0x32, 0x2D, 0xDE, 0x55, 0x92, 0x3B, 0x23, 0xF8, 0x30, 0xC7, 0xE2, 0x99, 0x5F, 0x47, 0xE4, 0x74, 0xF0, 0xC6, 0xD6, 0xB5, 0xF3, 0x8C, 0x18, 0x5E, 0xC3, 0xD6, 0x10, 0xB7, 0x89, 0x71, 0xC2, 0xE7, 0x9B, 0x7E, 0xDC, 0x30, 0xDB, 0x32, 0xD8, 0xEF, 0xFC, 0x68, 0x24, 0x8B, 0x8E, 0xDF, 0xBC, 0x0B, 0x2E, 0x52, 0xB2, 0x15, 0x73, 0x2E, 0x92, 0x32, 0x7A, 0xD7, 0x11, 0x8C, 0x3E, 0x28, 0x78, 0xBC, 0x4C};
byte message[message_length];
byte plaintext[1000];
// byte cyphertext[1000];



bool use_test_data = false;
byte testData[123] = {0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                      0x00, 0x00, 0x7e};
